$attr: data-overflows;
$max: 20;

@function eachIndexNth() {
  $selector: ();
  @for $i from 1 through $max {
    $selector: append($selector, "[#{$attr}~='#{$i}'] > & > :nth-child(n + #{$i})", $separator: comma);
  }
  @return $selector;
}

.base {
  display: flex;
  max-width: max-content;
  position: relative;
}

.observedList {
  display: flex;
  overflow: clip;
  white-space: nowrap;

  // [#{$attr}] is only set if JS is working.
  // ensures that isIntersecting is false for all over-max items:
  [#{$attr}] > & > :nth-child(n + #{$max + 1}) {
    display: none;
  }

  #{eachIndexNth()} {
    visibility: hidden;
  }
}

// attribute is only empty string if isIntersecting is true for ALL items.
// hide overflow control/list if nothing is overflowing:
[#{$attr}=""] > :is(.overflowControl, .overflowList) {
  display: none;
}

.overflowControl {
  flex-shrink: 0;
}

.overflowList {
  position: absolute;
  top: 100%;
  right: 0;
  display: none;

  .base:focus-within &:not([#{$attr}] > .observedList:focus-within ~ &),
  .overflowControl:is(:hover, :focus-within) ~ &,
  &:is(:hover, :focus-within) {
    display: block;
  }

  // [#{$attr}] is only set if JS is working.
  // if JS works, hide overflow list items by default:
  [#{$attr}] > & > * {
    display: var(--overflowMenu-overflowItem-display, none);
  }
  > :nth-child(n + #{$max + 1}),
  #{eachIndexNth()} {
    --overflowMenu-overflowItem-display: ;
  }
}
